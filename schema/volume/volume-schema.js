function main() {
    // Name property (required)
    const nameProp = new PropBuilder()
        .setName("name")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().required().max(64).pattern(/^[a-z][a-z0-9\-]*[a-z0-9]$/))
        .setDocumentation("A human-readable name for the block storage volume. Must be lowercase and be composed only of numbers, letters and \"-\", up to a limit of 64 characters. The name must begin with a letter.")
        .build();

    // Size in gigabytes property (required)
    const sizeGigabytesProp = new PropBuilder()
        .setName("size_gigabytes")
        .setKind("float")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.number().integer().required().min(1).max(16384))
        .setDocumentation("The size of the block storage volume in GiB (1024^3). This field does not apply when creating a volume from a snapshot.")
        .build();

    // Region property (required)
    const regionProp = new PropBuilder()
        .setName("region")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("comboBox")
            .addOption("ams1", "Amsterdam 1")
            .addOption("ams2", "Amsterdam 2")
            .addOption("ams3", "Amsterdam 3")
            .addOption("blr1", "Bangalore 1")
            .addOption("fra1", "Frankfurt 1")
            .addOption("lon1", "London 1")
            .addOption("nyc1", "New York 1")
            .addOption("nyc2", "New York 2")
            .addOption("nyc3", "New York 3")
            .addOption("sfo1", "San Francisco 1")
            .addOption("sfo2", "San Francisco 2")
            .addOption("sfo3", "San Francisco 3")
            .addOption("sgp1", "Singapore 1")
            .addOption("tor1", "Toronto 1")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().required())
        .setDocumentation("The slug identifier for the region where the resource will initially be available.")
        .build();

    // Description property (optional)
    const descriptionProp = new PropBuilder()
        .setName("description")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("textArea")
            .build())
        .setValidationFormat(Joi.string().allow(""))
        .setDocumentation("An optional free-form text field to describe a block storage volume.")
        .build();

    // Filesystem type property (optional)
    const filesystemTypeProp = new PropBuilder()
        .setName("filesystem_type")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("comboBox")
            .addOption("ext4", "ext4 (recommended)")
            .addOption("xfs", "xfs")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().valid("ext4", "xfs"))
        .setDocumentation("The name of the filesystem type to be used on the volume. When provided, the volume will automatically be formatted to the specified filesystem type. Currently, the available options are `ext4` and `xfs`. Pre-formatted volumes are automatically mounted when attached to Ubuntu, Debian, Fedora, Fedora Atomic, and CentOS Droplets created on or after April 26, 2018. Attaching pre-formatted volumes to other Droplets is not recommended.")
        .build();

    // Filesystem label property (optional)
    const filesystemLabelProp = new PropBuilder()
        .setName("filesystem_label")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().max(16))
        .setDocumentation("The label applied to the filesystem. Labels for ext4 type filesystems may contain 16 characters while labels for xfs type filesystems are limited to 12 characters. May only be used in conjunction with filesystem_type.")
        .build();

    // Snapshot ID property (optional, for creating from snapshot)
    const snapshotIdProp = new PropBuilder()
        .setName("snapshot_id")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().uuid())
        .setDocumentation("The unique identifier for the volume snapshot from which to create the volume.")
        .build();

    // Tags property (optional)
    const tagsProp = new PropBuilder()
        .setName("tags")
        .setKind("array")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .build())
        .setEntry(
            new PropBuilder()
                .setName("tags_item")
                .setKind("string")
                .setWidget(new PropWidgetDefinitionBuilder().setKind("text").build())
                .setValidationFormat(Joi.string())
                .build()
        )
        .setValidationFormat(Joi.array().items(Joi.string()).default([]))
        .setDocumentation("A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags. Requires `tag:create` scope.")
        .build();

    // Read-only properties for reference (these will be returned after creation but not set during creation)
    
    // ID property (read-only)
    const idProp = new PropBuilder()
        .setName("id")
        .setKind("string")
        .setHidden(true)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .build())
        .setValidationFormat(Joi.string().uuid())
        .setDocumentation("The unique identifier for the block storage volume.")
        .build();

    // Droplet IDs property (read-only)
    const dropletIdsProp = new PropBuilder()
        .setName("droplet_ids")
        .setKind("array")
        .setHidden(true)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .build())
        .setEntry(
            new PropBuilder()
                .setName("droplet_ids_item")
                .setKind("float")
                .setWidget(new PropWidgetDefinitionBuilder().setKind("text").build())
                .setValidationFormat(Joi.number().integer())
                .build()
        )
        .setValidationFormat(Joi.array().items(Joi.number().integer()).default([]))
        .setDocumentation("An array containing the IDs of the Droplets the volume is attached to. Note that at this time, a volume can only be attached to a single Droplet.")
        .build();

    // Created at property (read-only)
    const createdAtProp = new PropBuilder()
        .setName("created_at")
        .setKind("string")
        .setHidden(true)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .build())
        .setValidationFormat(Joi.string().isoDate())
        .setDocumentation("A time value given in ISO8601 combined date and time format that represents when the block storage volume was created.")
        .build();

    // Create the asset
    const asset = new AssetBuilder()
        .addProp(nameProp)
        .addProp(sizeGigabytesProp)
        .addProp(regionProp)
        .addProp(descriptionProp)
        .addProp(filesystemTypeProp)
        .addProp(filesystemLabelProp)
        .addProp(snapshotIdProp)
        .addProp(tagsProp)
        .addProp(idProp)
        .addProp(dropletIdsProp)
        .addProp(createdAtProp)
        .build();

    return asset;
}