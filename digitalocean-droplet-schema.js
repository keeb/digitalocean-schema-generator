function main() {
    // Props
    const nameProp = new PropBuilder()
        .setName("name")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().required().max(255).pattern(/^[a-zA-Z0-9]?[a-z0-9A-Z.\-]*[a-z0-9A-Z]$/))
        .setDocumentation("The human-readable string you wish to use when displaying the Droplet name. The name, if set to a domain name managed in the DigitalOcean DNS management system, will configure a PTR record for the Droplet. The name set during creation will also determine the hostname for the Droplet in its internal configuration.")
        .build();

    const regionProp = new PropBuilder()
        .setName("region")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("comboBox")
            .addOption("nyc1", "New York 1")
            .addOption("nyc3", "New York 3")
            .addOption("ams3", "Amsterdam 3")
            .addOption("sfo3", "San Francisco 3")
            .addOption("sgp1", "Singapore 1")
            .addOption("lon1", "London 1")
            .addOption("fra1", "Frankfurt 1")
            .addOption("tor1", "Toronto 1")
            .addOption("blr1", "Bangalore 1")
            .setCreateOnly()
            .build())
        .setDocumentation("The slug identifier for the region that you wish to deploy the Droplet in. If the specific datacenter is not important, a slug prefix (e.g. 'nyc') can be used to deploy the Droplet in any of that region's locations ('nyc1', 'nyc2', or 'nyc3'). If the region is omitted from the create request completely, the Droplet may deploy in any region.")
        .build();

    const sizeProp = new PropBuilder()
        .setName("size")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("comboBox")
            .addOption("s-1vcpu-1gb", "Basic - 1 vCPU, 1GB RAM")
            .addOption("s-1vcpu-2gb", "Basic - 1 vCPU, 2GB RAM")
            .addOption("s-2vcpu-2gb", "Basic - 2 vCPU, 2GB RAM")
            .addOption("s-2vcpu-4gb", "Basic - 2 vCPU, 4GB RAM")
            .addOption("s-4vcpu-8gb", "Basic - 4 vCPU, 8GB RAM")
            .addOption("c-2", "CPU Optimized - 2 vCPU")
            .addOption("c-4", "CPU Optimized - 4 vCPU")
            .addOption("m-2vcpu-16gb", "Memory Optimized - 2 vCPU, 16GB RAM")
            .addOption("m-4vcpu-32gb", "Memory Optimized - 4 vCPU, 32GB RAM")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().required())
        .setDocumentation("The slug identifier for the size that you wish to select for this Droplet.")
        .build();

    const imageProp = new PropBuilder()
        .setName("image")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("comboBox")
            .addOption("ubuntu-22-04-x64", "Ubuntu 22.04 LTS x64")
            .addOption("ubuntu-20-04-x64", "Ubuntu 20.04 LTS x64")
            .addOption("debian-11-x64", "Debian 11 x64")
            .addOption("fedora-37-x64", "Fedora 37 x64")
            .addOption("centos-stream-9-x64", "CentOS Stream 9 x64")
            .addOption("docker-20-04", "Docker on Ubuntu 20.04")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.alternatives().try(Joi.string(), Joi.number().integer()).required())
        .setDocumentation("The image ID of a public or private image or the slug identifier for a public image. This image will be the base image for your Droplet.")
        .build();

    const ssh_keysProp = new PropBuilder()
        .setName("ssh_keys")
        .setKind("array")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .setCreateOnly()
            .build())
        .setDocumentation("An array containing the IDs or fingerprints of the SSH keys that you wish to embed in the Droplet's root account upon creation. You must add the keys to your team before they can be embedded on a Droplet.")
        .setEntry(
            new PropBuilder()
            .setName("ssh_keys_item")
            .setKind("string")
            .setHidden(false)
            .setWidget(new PropWidgetDefinitionBuilder()
                .setKind("text")
                .build())
            .setDocumentation("SSH key ID (integer) or fingerprint (string)")
            .build()
        )
        .build();

    const backupsProp = new PropBuilder()
        .setName("backups")
        .setKind("boolean")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("checkbox")
            .setCreateOnly()
            .build())
        .setDocumentation("A boolean indicating whether automated backups should be enabled for the Droplet.")
        .build();

    const backup_policyProp = new PropBuilder()
        .setName("backup_policy")
        .setKind("object")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("header")
            .setCreateOnly()
            .build())
        .setDocumentation("An object specifying the backup policy for the Droplet. If omitted and 'backups' is 'true', the backup plan will default to daily.")
        .addChild(
            new PropBuilder()
            .setName("plan")
            .setKind("string")
            .setHidden(false)
            .setWidget(new PropWidgetDefinitionBuilder()
                .setKind("comboBox")
                .addOption("daily", "Daily")
                .addOption("weekly", "Weekly")
                .build())
            .setDocumentation("The backup plan frequency.")
            .build()
        )
        .addChild(
            new PropBuilder()
            .setName("weekday")
            .setKind("string")
            .setHidden(false)
            .setWidget(new PropWidgetDefinitionBuilder()
                .setKind("comboBox")
                .addOption("SUN", "Sunday")
                .addOption("MON", "Monday")
                .addOption("TUE", "Tuesday")
                .addOption("WED", "Wednesday")
                .addOption("THU", "Thursday")
                .addOption("FRI", "Friday")
                .addOption("SAT", "Saturday")
                .build())
            .setDocumentation("The day of the week for weekly backups (only used if plan is 'weekly').")
            .build()
        )
        .addChild(
            new PropBuilder()
            .setName("hour")
            .setKind("float")
            .setHidden(false)
            .setWidget(new PropWidgetDefinitionBuilder()
                .setKind("text")
                .build())
            .setValidationFormat(Joi.number().integer().min(0).max(23))
            .setDocumentation("The hour of the day for backups (0-23).")
            .build()
        )
        .addChild(
            new PropBuilder()
            .setName("window_length_hours")
            .setKind("float")
            .setHidden(false)
            .setWidget(new PropWidgetDefinitionBuilder()
                .setKind("text")
                .build())
            .setValidationFormat(Joi.number().integer().min(1).max(24))
            .setDocumentation("The length of the backup window in hours.")
            .build()
        )
        .addChild(
            new PropBuilder()
            .setName("retention_period_days")
            .setKind("float")
            .setHidden(false)
            .setWidget(new PropWidgetDefinitionBuilder()
                .setKind("text")
                .build())
            .setValidationFormat(Joi.number().integer().min(1))
            .setDocumentation("The retention period for backups in days.")
            .build()
        )
        .build();

    const ipv6Prop = new PropBuilder()
        .setName("ipv6")
        .setKind("boolean")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("checkbox")
            .setCreateOnly()
            .build())
        .setDocumentation("A boolean indicating whether to enable IPv6 on the Droplet.")
        .build();

    const monitoringProp = new PropBuilder()
        .setName("monitoring")
        .setKind("boolean")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("checkbox")
            .setCreateOnly()
            .build())
        .setDocumentation("A boolean indicating whether to install the DigitalOcean agent for monitoring.")
        .build();

    const tagsProp = new PropBuilder()
        .setName("tags")
        .setKind("array")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .setCreateOnly()
            .build())
        .setDocumentation("A flat array of tag names as strings to apply to the Droplet after it is created. Tag names can either be existing or new tags.")
        .setEntry(
            new PropBuilder()
            .setName("tags_item")
            .setKind("string")
            .setHidden(false)
            .setWidget(new PropWidgetDefinitionBuilder()
                .setKind("text")
                .build())
            .setDocumentation("Tag name")
            .build()
        )
        .build();

    const user_dataProp = new PropBuilder()
        .setName("user_data")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("codeEditor")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().max(65536))
        .setDocumentation("A string containing 'user data' which may be used to configure the Droplet on first boot, often a 'cloud-config' file or Bash script. It must be plain text and may not exceed 64 KiB in size.")
        .build();

    const volumesProp = new PropBuilder()
        .setName("volumes")
        .setKind("array")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .setCreateOnly()
            .build())
        .setDocumentation("An array of IDs for block storage volumes that will be attached to the Droplet once created. The volumes must not already be attached to an existing Droplet.")
        .setEntry(
            new PropBuilder()
            .setName("volumes_item")
            .setKind("string")
            .setHidden(false)
            .setWidget(new PropWidgetDefinitionBuilder()
                .setKind("text")
                .build())
            .setDocumentation("Volume UUID")
            .build()
        )
        .build();

    const vpc_uuidProp = new PropBuilder()
        .setName("vpc_uuid")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().uuid())
        .setDocumentation("A string specifying the UUID of the VPC to which the Droplet will be assigned. If excluded, the Droplet will be assigned to your account's default VPC for the region.")
        .build();

    const with_droplet_agentProp = new PropBuilder()
        .setName("with_droplet_agent")
        .setKind("boolean")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("checkbox")
            .setCreateOnly()
            .build())
        .setDocumentation("A boolean indicating whether to install the DigitalOcean agent used for providing access to the Droplet web console in the control panel. By default, the agent is installed on new Droplets but installation errors (i.e. OS not supported) are ignored. To prevent it from being installed, set to 'false'. To make installation errors fatal, explicitly set it to 'true'.")
        .build();

    // Create the asset function
    const assetFunc = new AssetFunctionBuilder()
        .setName("DigitalOcean::Compute::Droplet")
        .setDescription("Creates a DigitalOcean Droplet instance")
        .addProp(nameProp)
        .addProp(regionProp)
        .addProp(sizeProp)
        .addProp(imageProp)
        .addProp(ssh_keysProp)
        .addProp(backupsProp)
        .addProp(backup_policyProp)
        .addProp(ipv6Prop)
        .addProp(monitoringProp)
        .addProp(tagsProp)
        .addProp(user_dataProp)
        .addProp(volumesProp)
        .addProp(vpc_uuidProp)
        .addProp(with_droplet_agentProp)
        .build();

    return assetFunc;
}