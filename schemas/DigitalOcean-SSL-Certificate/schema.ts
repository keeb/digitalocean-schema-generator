function main() {
    // DigitalOcean API Token secret
    const DOCredentialSecretProp = new SecretPropBuilder()
        .setName("DigitalOcean Credential")
        .setSecretKind("DigitalOcean Credential")
        .build();

    // Name property (required)
    const nameProp = new PropBuilder()
        .setName("name")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .build())
        .setValidationFormat(Joi.string().required().max(255))
        .setDocumentation("A unique human-readable name referring to a certificate.")
        .build();

    // Type property (required, create-only)
    const typeProp = new PropBuilder()
        .setName("type")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("comboBox")
            .addOption("lets_encrypt", "Let's Encrypt")
            .addOption("custom", "Custom")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().required().valid("lets_encrypt", "custom"))
        .setDocumentation("A string representing the type of the certificate. The value will be `custom` for a user-uploaded certificate or `lets_encrypt` for one automatically generated with Let's Encrypt.")
        .build();

    // DNS Names property (required for Let's Encrypt certificates)
    const dnsNamesProp = new PropBuilder()
        .setName("dns_names")
        .setKind("array")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .build())
        .setEntry(
            new PropBuilder()
            .setName("dns_names_item")
            .setKind("string")
            .setWidget(new PropWidgetDefinitionBuilder()
                .setKind("text")
                .build())
            .setValidationFormat(Joi.string().required())
            .setDocumentation("Fully qualified domain name (FQDN)")
            .build()
        )
        .setValidationFormat(Joi.array().items(Joi.string().required()).min(1))
        .setDocumentation("An array of fully qualified domain names (FQDNs) for which the certificate was issued. A certificate covering all subdomains can be issued using a wildcard (e.g. `*.example.com`).")
        .build();

    // Private Key property (required for custom certificates, create-only)
    const privateKeyProp = new PropBuilder()
        .setName("private_key")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("codeEditor")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().pattern(/^-----BEGIN (PRIVATE KEY|RSA PRIVATE KEY|EC PRIVATE KEY)-----[\s\S]*-----END (PRIVATE KEY|RSA PRIVATE KEY|EC PRIVATE KEY)-----$/))
        .setDocumentation("The contents of a PEM-formatted private-key corresponding to the SSL certificate.")
        .build();

    // Leaf Certificate property (required for custom certificates, create-only)
    const leafCertificateProp = new PropBuilder()
        .setName("leaf_certificate")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("codeEditor")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().pattern(/^-----BEGIN CERTIFICATE-----[\s\S]*-----END CERTIFICATE-----$/))
        .setDocumentation("The contents of a PEM-formatted public SSL certificate.")
        .build();

    // Certificate Chain property (optional for custom certificates, create-only)
    const certificateChainProp = new PropBuilder()
        .setName("certificate_chain")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("codeEditor")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().pattern(/^-----BEGIN CERTIFICATE-----[\s\S]*-----END CERTIFICATE-----$/))
        .setDocumentation("The full PEM-formatted trust chain between the certificate authority's certificate and your domain's SSL certificate.")
        .build();

    // ID property (read-only, computed)
    const idProp = new PropBuilder()
        .setName("id")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .build())
        .setValidationFormat(Joi.string().uuid())
        .setDocumentation("A unique ID that can be used to identify and reference a certificate.")
        .build();

    // SHA1 Fingerprint property (read-only, computed)
    const sha1FingerprintProp = new PropBuilder()
        .setName("sha1_fingerprint")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .build())
        .setValidationFormat(Joi.string().pattern(/^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){19}$/))
        .setDocumentation("A unique identifier generated from the SHA-1 fingerprint of the certificate.")
        .build();

    // Not After property (read-only, computed)
    const notAfterProp = new PropBuilder()
        .setName("not_after")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .build())
        .setValidationFormat(Joi.string().isoDate())
        .setDocumentation("A time value given in ISO8601 combined date and time format that represents the certificate's expiration date.")
        .build();

    // Created At property (read-only, computed)
    const createdAtProp = new PropBuilder()
        .setName("created_at")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .build())
        .setValidationFormat(Joi.string().isoDate())
        .setDocumentation("A time value given in ISO8601 combined date and time format that represents when the certificate was created.")
        .build();

    // State property (read-only, computed)
    const stateProp = new PropBuilder()
        .setName("state")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .build())
        .setValidationFormat(Joi.string().valid("pending", "verified", "error"))
        .setDocumentation("A string representing the current state of the certificate. It may be `pending`, `verified`, or `error`.")
        .build();

    // Create the asset
    const asset = new AssetBuilder()
        .addProp(nameProp)
        .addProp(typeProp)
        .addProp(dnsNamesProp)
        .addProp(privateKeyProp)
        .addProp(leafCertificateProp)
        .addProp(certificateChainProp)
        .addResourceProp(idProp)
        .addResourceProp(sha1FingerprintProp)
        .addResourceProp(notAfterProp)
        .addResourceProp(createdAtProp)
        .addResourceProp(stateProp)
        .addSecretProp(DOCredentialSecretProp)
        .build();

    return asset;
}
