function main() {
    // Namespace region property (required for namespace creation)
    const namespaceLabelProp = new PropBuilder()
        .setName("namespace_label")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().required().max(255))
        .setDocumentation("The namespace's unique name.")
        .build();

    // Namespace region property
    const namespaceRegionProp = new PropBuilder()
        .setName("namespace_region")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("comboBox")
            .addOption("nyc1", "New York 1")
            .addOption("nyc3", "New York 3")
            .addOption("ams3", "Amsterdam 3")
            .addOption("sfo3", "San Francisco 3")
            .addOption("sgp1", "Singapore 1")
            .addOption("lon1", "London 1")
            .addOption("fra1", "Frankfurt 1")
            .addOption("tor1", "Toronto 1")
            .addOption("blr1", "Bangalore 1")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().required())
        .setDocumentation("The datacenter region in which to create the namespace.")
        .build();

    // Function name property
    const functionNameProp = new PropBuilder()
        .setName("name")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .build())
        .setValidationFormat(Joi.string().max(32).min(2).pattern(/^[a-z][a-z0-9-]{0,30}[a-z0-9]$/))
        .setDocumentation("The name. Must be unique across all components within the same app.")
        .build();

    // Function source directory property
    const sourceDirectoryProp = new PropBuilder()
        .setName("source_dir")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .build())
        .setValidationFormat(Joi.string().optional())
        .setDocumentation("An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.")
        .build();

    // Environment variables array
    const environmentVariablesProp = new PropBuilder()
        .setName("environment_variables")
        .setKind("array")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .build())
        .setEntry(
            new PropBuilder()
                .setName("environment_variable")
                .setKind("object")
                .setWidget(new PropWidgetDefinitionBuilder()
                    .setKind("header")
                    .build())
                .addChild(
                    new PropBuilder()
                        .setName("key")
                        .setKind("string")
                        .setWidget(new PropWidgetDefinitionBuilder()
                            .setKind("text")
                            .build())
                        .setValidationFormat(Joi.string().pattern(/^[_A-Za-z][_A-Za-z0-9]*$/))
                        .setDocumentation("The variable name")
                        .build()
                )
                .addChild(
                    new PropBuilder()
                        .setName("value")
                        .setKind("string")
                        .setWidget(new PropWidgetDefinitionBuilder()
                            .setKind("text")
                            .build())
                        .setValidationFormat(Joi.string())
                        .setDocumentation("The value. If the type is SECRET, the value will be encrypted on first submission.")
                        .build()
                )
                .addChild(
                    new PropBuilder()
                        .setName("scope")
                        .setKind("string")
                        .setWidget(new PropWidgetDefinitionBuilder()
                            .setKind("comboBox")
                            .addOption("UNSET", "Unset")
                            .addOption("RUN_TIME", "Run Time")
                            .addOption("BUILD_TIME", "Build Time")
                            .addOption("RUN_AND_BUILD_TIME", "Run and Build Time")
                            .build())
                        .setValidationFormat(Joi.string().valid("UNSET", "RUN_TIME", "BUILD_TIME", "RUN_AND_BUILD_TIME"))
                        .setDocumentation("RUN_TIME: Made available only at run-time, BUILD_TIME: Made available only at build-time, RUN_AND_BUILD_TIME: Made available at both build and run-time")
                        .build()
                )
                .addChild(
                    new PropBuilder()
                        .setName("type")
                        .setKind("string")
                        .setWidget(new PropWidgetDefinitionBuilder()
                            .setKind("comboBox")
                            .addOption("GENERAL", "General")
                            .addOption("SECRET", "Secret")
                            .build())
                        .setValidationFormat(Joi.string().valid("GENERAL", "SECRET"))
                        .setDocumentation("GENERAL: A plain-text environment variable, SECRET: A secret encrypted environment variable")
                        .build()
                )
                .build()
        )
        .setDocumentation("A list of environment variables made available to the component.")
        .build();

    // Function triggers array
    const triggersProp = new PropBuilder()
        .setName("triggers")
        .setKind("array")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .build())
        .setEntry(
            new PropBuilder()
                .setName("trigger")
                .setKind("object")
                .setWidget(new PropWidgetDefinitionBuilder()
                    .setKind("header")
                    .build())
                .addChild(
                    new PropBuilder()
                        .setName("name")
                        .setKind("string")
                        .setWidget(new PropWidgetDefinitionBuilder()
                            .setKind("text")
                            .build())
                        .setValidationFormat(Joi.string().required())
                        .setDocumentation("The trigger's unique name within the namespace.")
                        .build()
                )
                .addChild(
                    new PropBuilder()
                        .setName("function")
                        .setKind("string")
                        .setWidget(new PropWidgetDefinitionBuilder()
                            .setKind("text")
                            .build())
                        .setValidationFormat(Joi.string().required())
                        .setDocumentation("Name of function(action) that exists in the given namespace.")
                        .build()
                )
                .addChild(
                    new PropBuilder()
                        .setName("type")
                        .setKind("string")
                        .setWidget(new PropWidgetDefinitionBuilder()
                            .setKind("comboBox")
                            .addOption("SCHEDULED", "Scheduled")
                            .build())
                        .setValidationFormat(Joi.string().valid("SCHEDULED").required())
                        .setDocumentation("One of different type of triggers. Currently only SCHEDULED is supported.")
                        .build()
                )
                .addChild(
                    new PropBuilder()
                        .setName("is_enabled")
                        .setKind("boolean")
                        .setWidget(new PropWidgetDefinitionBuilder()
                            .setKind("checkbox")
                            .build())
                        .setValidationFormat(Joi.boolean().required())
                        .setDocumentation("Indicates weather the trigger is paused or unpaused.")
                        .build()
                )
                .addChild(
                    new PropBuilder()
                        .setName("scheduled_details")
                        .setKind("object")
                        .setWidget(new PropWidgetDefinitionBuilder()
                            .setKind("header")
                            .build())
                        .addChild(
                            new PropBuilder()
                                .setName("cron")
                                .setKind("string")
                                .setWidget(new PropWidgetDefinitionBuilder()
                                    .setKind("text")
                                    .build())
                                .setValidationFormat(Joi.string().required())
                                .setDocumentation("Valid cron expression string which is required for SCHEDULED type triggers.")
                                .build()
                        )
                        .addChild(
                            new PropBuilder()
                                .setName("body")
                                .setKind("object")
                                .setWidget(new PropWidgetDefinitionBuilder()
                                    .setKind("codeEditor")
                                    .build())
                                .setValidationFormat(Joi.object().optional().allow(null))
                                .setDocumentation("Optional data to be sent to function while triggering the function.")
                                .build()
                        )
                        .setDocumentation("Trigger details for SCHEDULED type, where body is optional.")
                        .build()
                )
                .build()
        )
        .setDocumentation("A list of triggers for functions in the namespace.")
        .build();

    // Git source property
    const gitSourceProp = new PropBuilder()
        .setName("git")
        .setKind("object")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("header")
            .build())
        .addChild(
            new PropBuilder()
                .setName("repo_clone_url")
                .setKind("string")
                .setWidget(new PropWidgetDefinitionBuilder()
                    .setKind("text")
                    .build())
                .setValidationFormat(Joi.string())
                .setDocumentation("The clone URL of the repo. Example: https://github.com/digitalocean/sample-app.git")
                .build()
        )
        .addChild(
            new PropBuilder()
                .setName("branch")
                .setKind("string")
                .setWidget(new PropWidgetDefinitionBuilder()
                    .setKind("text")
                    .build())
                .setValidationFormat(Joi.string())
                .setDocumentation("The name of the branch to use")
                .build()
        )
        .setDocumentation("Git repository source configuration")
        .build();

    // GitHub source property
    const githubSourceProp = new PropBuilder()
        .setName("github")
        .setKind("object")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("header")
            .build())
        .addChild(
            new PropBuilder()
                .setName("repo")
                .setKind("string")
                .setWidget(new PropWidgetDefinitionBuilder()
                    .setKind("text")
                    .build())
                .setValidationFormat(Joi.string())
                .setDocumentation("The name of the repo in the format owner/repo. Example: digitalocean/sample-app")
                .build()
        )
        .addChild(
            new PropBuilder()
                .setName("branch")
                .setKind("string")
                .setWidget(new PropWidgetDefinitionBuilder()
                    .setKind("text")
                    .build())
                .setValidationFormat(Joi.string())
                .setDocumentation("The name of the branch to use")
                .build()
        )
        .addChild(
            new PropBuilder()
                .setName("deploy_on_push")
                .setKind("boolean")
                .setWidget(new PropWidgetDefinitionBuilder()
                    .setKind("checkbox")
                    .build())
                .setValidationFormat(Joi.boolean())
                .setDocumentation("Whether to automatically deploy new commits made to the repo")
                .build()
        )
        .setDocumentation("GitHub repository source configuration")
        .build();

    // Create the asset
    const asset = new AssetBuilder()
        .addProp(namespaceLabelProp)
        .addProp(namespaceRegionProp)
        .addProp(functionNameProp)
        .addProp(sourceDirectoryProp)
        .addProp(environmentVariablesProp)
        .addProp(triggersProp)
        .addProp(gitSourceProp)
        .addProp(githubSourceProp)
        .build();

    return asset;
}