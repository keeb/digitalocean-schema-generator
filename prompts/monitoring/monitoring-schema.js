function main() {
    // Type property - monitoring metric type (required, createOnly)
    const typeProp = new PropBuilder()
        .setName("type")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("comboBox")
            .addOption("v1/insights/droplet/load_1", "Droplet Load 1 Minute")
            .addOption("v1/insights/droplet/load_5", "Droplet Load 5 Minutes")
            .addOption("v1/insights/droplet/load_15", "Droplet Load 15 Minutes")
            .addOption("v1/insights/droplet/memory_utilization_percent", "Droplet Memory Utilization %")
            .addOption("v1/insights/droplet/disk_utilization_percent", "Droplet Disk Utilization %")
            .addOption("v1/insights/droplet/cpu", "Droplet CPU Utilization")
            .addOption("v1/insights/droplet/disk_read", "Droplet Disk Read")
            .addOption("v1/insights/droplet/disk_write", "Droplet Disk Write")
            .addOption("v1/insights/droplet/public_outbound_bandwidth", "Droplet Public Outbound Bandwidth")
            .addOption("v1/insights/droplet/public_inbound_bandwidth", "Droplet Public Inbound Bandwidth")
            .addOption("v1/insights/droplet/private_outbound_bandwidth", "Droplet Private Outbound Bandwidth")
            .addOption("v1/insights/droplet/private_inbound_bandwidth", "Droplet Private Inbound Bandwidth")
            .addOption("v1/insights/lbaas/avg_cpu_utilization_percent", "Load Balancer Average CPU Utilization %")
            .addOption("v1/insights/lbaas/connection_utilization_percent", "Load Balancer Connection Utilization %")
            .addOption("v1/insights/lbaas/droplet_health", "Load Balancer Droplet Health")
            .addOption("v1/insights/lbaas/tls_connections_per_second_utilization_percent", "Load Balancer TLS Connections Per Second %")
            .addOption("v1/insights/lbaas/increase_in_http_error_rate_percentage_5xx", "Load Balancer HTTP 5xx Error Rate % Increase")
            .addOption("v1/insights/lbaas/increase_in_http_error_rate_percentage_4xx", "Load Balancer HTTP 4xx Error Rate % Increase")
            .addOption("v1/insights/lbaas/increase_in_http_error_rate_count_5xx", "Load Balancer HTTP 5xx Error Count Increase")
            .addOption("v1/insights/lbaas/increase_in_http_error_rate_count_4xx", "Load Balancer HTTP 4xx Error Count Increase")
            .addOption("v1/insights/lbaas/high_http_request_response_time", "Load Balancer High HTTP Response Time")
            .addOption("v1/insights/lbaas/high_http_request_response_time_50p", "Load Balancer HTTP Response Time 50th Percentile")
            .addOption("v1/insights/lbaas/high_http_request_response_time_95p", "Load Balancer HTTP Response Time 95th Percentile")
            .addOption("v1/insights/lbaas/high_http_request_response_time_99p", "Load Balancer HTTP Response Time 99th Percentile")
            .addOption("v1/dbaas/alerts/load_15_alerts", "Database Load 15 Minutes")
            .addOption("v1/dbaas/alerts/memory_utilization_alerts", "Database Memory Utilization")
            .addOption("v1/dbaas/alerts/disk_utilization_alerts", "Database Disk Utilization")
            .addOption("v1/dbaas/alerts/cpu_alerts", "Database CPU Utilization")
            .addOption("v1/droplet/autoscale_alerts/current_instances", "Autoscale Current Instances")
            .addOption("v1/droplet/autoscale_alerts/target_instances", "Autoscale Target Instances")
            .addOption("v1/droplet/autoscale_alerts/current_cpu_utilization", "Autoscale Current CPU Utilization")
            .addOption("v1/droplet/autoscale_alerts/target_cpu_utilization", "Autoscale Target CPU Utilization")
            .addOption("v1/droplet/autoscale_alerts/current_memory_utilization", "Autoscale Current Memory Utilization")
            .addOption("v1/droplet/autoscale_alerts/target_memory_utilization", "Autoscale Target Memory Utilization")
            .addOption("v1/droplet/autoscale_alerts/scale_up", "Autoscale Scale Up")
            .addOption("v1/droplet/autoscale_alerts/scale_down", "Autoscale Scale Down")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().required())
        .setDocumentation("The type of metric to monitor. This determines what metric is tracked and which entity types the alert policy applies to.")
        .build();

    // Description property (required)
    const descriptionProp = new PropBuilder()
        .setName("description")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .build())
        .setValidationFormat(Joi.string().required().max(255))
        .setDocumentation("A human-readable description of the alert policy.")
        .build();

    // Compare property (required)
    const compareProp = new PropBuilder()
        .setName("compare")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("comboBox")
            .addOption("GreaterThan", "Greater Than")
            .addOption("LessThan", "Less Than")
            .build())
        .setValidationFormat(Joi.string().required())
        .setDocumentation("The comparison operator to use when evaluating the alert condition.")
        .build();

    // Value property (required)
    const valueProp = new PropBuilder()
        .setName("value")
        .setKind("float")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .build())
        .setValidationFormat(Joi.number().required().min(0))
        .setDocumentation("The threshold value to compare against the metric value.")
        .build();

    // Window property (required)
    const windowProp = new PropBuilder()
        .setName("window")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("comboBox")
            .addOption("5m", "5 Minutes")
            .addOption("10m", "10 Minutes")
            .addOption("30m", "30 Minutes")
            .addOption("1h", "1 Hour")
            .build())
        .setValidationFormat(Joi.string().required())
        .setDocumentation("The time window over which the alert condition is evaluated.")
        .build();

    // Entities property (required)
    const entitiesProp = new PropBuilder()
        .setName("entities")
        .setKind("array")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .build())
        .setEntry(
            new PropBuilder()
                .setName("entities_item")
                .setKind("string")
                .setWidget(new PropWidgetDefinitionBuilder().setKind("text").build())
                .setValidationFormat(Joi.string())
                .setDocumentation("Entity ID (e.g., Droplet ID, Load Balancer ID)")
                .build()
        )
        .setValidationFormat(Joi.array().items(Joi.string()).required())
        .setDocumentation("An array of entity IDs that the alert policy should monitor. These are the specific resources (droplets, load balancers, etc.) that will be monitored.")
        .build();

    // Tags property (required)
    const tagsProp = new PropBuilder()
        .setName("tags")
        .setKind("array")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .build())
        .setEntry(
            new PropBuilder()
                .setName("tags_item")
                .setKind("string")
                .setWidget(new PropWidgetDefinitionBuilder().setKind("text").build())
                .setValidationFormat(Joi.string())
                .setDocumentation("Tag name")
                .build()
        )
        .setValidationFormat(Joi.array().items(Joi.string()).required())
        .setDocumentation("An array of tag names. The alert policy will apply to all resources that have these tags applied.")
        .build();

    // Enabled property (required)
    const enabledProp = new PropBuilder()
        .setName("enabled")
        .setKind("boolean")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("checkbox")
            .build())
        .setValidationFormat(Joi.boolean().required())
        .setDocumentation("A boolean indicating whether the alert policy is enabled and will trigger alerts.")
        .build();

    // Alerts object - Email array property
    const alertsEmailProp = new PropBuilder()
        .setName("email")
        .setKind("array")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .build())
        .setEntry(
            new PropBuilder()
                .setName("email_item")
                .setKind("string")
                .setWidget(new PropWidgetDefinitionBuilder().setKind("text").build())
                .setValidationFormat(Joi.string().email())
                .setDocumentation("Email address to notify")
                .build()
        )
        .setValidationFormat(Joi.array().items(Joi.string().email()).required())
        .setDocumentation("An array of email addresses to notify when the alert is triggered.")
        .build();

    // Alerts object - Slack details URL property
    const alertsSlackUrlProp = new PropBuilder()
        .setName("url")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .build())
        .setValidationFormat(Joi.string().uri())
        .setDocumentation("Slack webhook URL for notifications.")
        .build();

    // Alerts object - Slack details channel property
    const alertsSlackChannelProp = new PropBuilder()
        .setName("channel")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .build())
        .setValidationFormat(Joi.string())
        .setDocumentation("Slack channel name to notify.")
        .build();

    // Alerts object - Slack details object
    const alertsSlackProp = new PropBuilder()
        .setName("slack_details")
        .setKind("object")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("header")
            .build())
        .addChild(alertsSlackUrlProp)
        .addChild(alertsSlackChannelProp)
        .setDocumentation("Slack integration details for alert notifications.")
        .build();

    // Alerts object - Slack array property
    const alertsSlackArrayProp = new PropBuilder()
        .setName("slack")
        .setKind("array")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .build())
        .setEntry(alertsSlackProp)
        .setValidationFormat(Joi.array().items(Joi.object({
            url: Joi.string().uri().required(),
            channel: Joi.string().required()
        })).required())
        .setDocumentation("An array of Slack integration configurations for alert notifications.")
        .build();

    // Main Alerts object property (required)
    const alertsProp = new PropBuilder()
        .setName("alerts")
        .setKind("object")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("header")
            .build())
        .addChild(alertsEmailProp)
        .addChild(alertsSlackArrayProp)
        .setValidationFormat(Joi.object({
            email: Joi.array().items(Joi.string().email()).required(),
            slack: Joi.array().items(Joi.object({
                url: Joi.string().uri().required(),
                channel: Joi.string().required()
            })).required()
        }).required())
        .setDocumentation("Alert notification configuration including email addresses and Slack integrations.")
        .build();

    // Create the asset
    const asset = new AssetBuilder()
        .addProp(typeProp)
        .addProp(descriptionProp)
        .addProp(compareProp)
        .addProp(valueProp)
        .addProp(windowProp)
        .addProp(entitiesProp)
        .addProp(tagsProp)
        .addProp(enabledProp)
        .addProp(alertsProp)
        .build();

    return asset;
}