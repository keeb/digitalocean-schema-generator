function main() {
    // Name property (required)
    const nameProp = new PropBuilder()
        .setName("name")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().required().max(255).pattern(/^[a-zA-Z0-9]?[a-z0-9A-Z.\-]*[a-z0-9A-Z]$/))
        .setDocumentation("A human-readable name for a Kubernetes cluster.")
        .build();

    // Region property (required)
    const regionProp = new PropBuilder()
        .setName("region")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("comboBox")
            .addOption("nyc1", "New York 1")
            .addOption("nyc3", "New York 3")
            .addOption("ams3", "Amsterdam 3")
            .addOption("sfo3", "San Francisco 3")
            .addOption("sgp1", "Singapore 1")
            .addOption("lon1", "London 1")
            .addOption("fra1", "Frankfurt 1")
            .addOption("tor1", "Toronto 1")
            .addOption("blr1", "Bangalore 1")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().required())
        .setDocumentation("The slug identifier for the region where the Kubernetes cluster is located.")
        .build();

    // Version property (required)
    const versionProp = new PropBuilder()
        .setName("version")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("comboBox")
            .addOption("1.31.1-do.4", "Kubernetes 1.31.1-do.4")
            .addOption("1.30.5-do.0", "Kubernetes 1.30.5-do.0")
            .addOption("1.29.9-do.0", "Kubernetes 1.29.9-do.0")
            .addOption("1.28.14-do.0", "Kubernetes 1.28.14-do.0")
            .addOption("latest", "Latest version")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().required())
        .setDocumentation("The slug identifier for the version of Kubernetes used for the cluster. If set to a minor version (e.g. \"1.14\"), the latest version within it will be used (e.g. \"1.14.6-do.1\"); if set to \"latest\", the latest published version will be used. See the `/v2/kubernetes/options` endpoint to find all currently available versions.")
        .build();

    // Node pools array (required)
    const nodePoolsProp = new PropBuilder()
        .setName("node_pools")
        .setKind("array")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .build())
        .setValidationFormat(Joi.array().min(1).required())
        .setDocumentation("An object specifying the details of the worker nodes available to the Kubernetes cluster.")
        .setEntry(
            new PropBuilder()
                .setName("node_pool")
                .setKind("object")
                .setWidget(new PropWidgetDefinitionBuilder()
                    .setKind("header")
                    .build())
                .addChild(
                    new PropBuilder()
                        .setName("name")
                        .setKind("string")
                        .setWidget(new PropWidgetDefinitionBuilder()
                            .setKind("text")
                            .build())
                        .setValidationFormat(Joi.string().required())
                        .setDocumentation("A human-readable name for the node pool.")
                        .build()
                )
                .addChild(
                    new PropBuilder()
                        .setName("size")
                        .setKind("string")
                        .setWidget(new PropWidgetDefinitionBuilder()
                            .setKind("comboBox")
                            .addOption("s-1vcpu-2gb", "Basic (1 vCPU, 2GB RAM)")
                            .addOption("s-2vcpu-2gb", "Basic (2 vCPU, 2GB RAM)")
                            .addOption("s-2vcpu-4gb", "Basic (2 vCPU, 4GB RAM)")
                            .addOption("s-4vcpu-8gb", "Basic (4 vCPU, 8GB RAM)")
                            .addOption("s-8vcpu-16gb", "Basic (8 vCPU, 16GB RAM)")
                            .addOption("c-2", "CPU Optimized (2 vCPU)")
                            .addOption("c-4", "CPU Optimized (4 vCPU)")
                            .addOption("c-8", "CPU Optimized (8 vCPU)")
                            .addOption("m-2vcpu-16gb", "Memory Optimized (2 vCPU, 16GB RAM)")
                            .addOption("m-4vcpu-32gb", "Memory Optimized (4 vCPU, 32GB RAM)")
                            .addOption("m-8vcpu-64gb", "Memory Optimized (8 vCPU, 64GB RAM)")
                            .addOption("g-2vcpu-8gb", "General Purpose (2 vCPU, 8GB RAM)")
                            .addOption("g-4vcpu-16gb", "General Purpose (4 vCPU, 16GB RAM)")
                            .addOption("g-8vcpu-32gb", "General Purpose (8 vCPU, 32GB RAM)")
                            .build())
                        .setValidationFormat(Joi.string().required())
                        .setDocumentation("The slug identifier for the type of Droplet used as workers in the node pool.")
                        .build()
                )
                .addChild(
                    new PropBuilder()
                        .setName("count")
                        .setKind("float")
                        .setWidget(new PropWidgetDefinitionBuilder()
                            .setKind("text")
                            .build())
                        .setValidationFormat(Joi.number().integer().min(1).required())
                        .setDocumentation("The number of Droplet instances in the node pool.")
                        .build()
                )
                .addChild(
                    new PropBuilder()
                        .setName("tags")
                        .setKind("array")
                        .setWidget(new PropWidgetDefinitionBuilder()
                            .setKind("array")
                            .build())
                        .setEntry(
                            new PropBuilder()
                                .setName("tag")
                                .setKind("string")
                                .setWidget(new PropWidgetDefinitionBuilder()
                                    .setKind("text")
                                    .build())
                                .build()
                        )
                        .setDocumentation("An array containing the tags applied to the node pool. All node pools are automatically tagged `k8s`, `k8s-worker`, and `k8s:$K8S_CLUSTER_ID`.")
                        .build()
                )
                .addChild(
                    new PropBuilder()
                        .setName("labels")
                        .setKind("object")
                        .setWidget(new PropWidgetDefinitionBuilder()
                            .setKind("textArea")
                            .build())
                        .setDocumentation("An object of key/value mappings specifying labels to apply to all nodes in a pool. Labels will automatically be applied to all existing nodes and any subsequent nodes added to the pool.")
                        .build()
                )
                .addChild(
                    new PropBuilder()
                        .setName("auto_scale")
                        .setKind("boolean")
                        .setWidget(new PropWidgetDefinitionBuilder()
                            .setKind("checkbox")
                            .build())
                        .setValidationFormat(Joi.boolean())
                        .setDocumentation("A boolean value indicating whether auto-scaling is enabled for this node pool.")
                        .build()
                )
                .addChild(
                    new PropBuilder()
                        .setName("min_nodes")
                        .setKind("float")
                        .setWidget(new PropWidgetDefinitionBuilder()
                            .setKind("text")
                            .build())
                        .setValidationFormat(Joi.number().integer().min(0))
                        .setDocumentation("The minimum number of nodes that this node pool can be auto-scaled to. The value will be `0` if `auto_scale` is set to `false`.")
                        .build()
                )
                .addChild(
                    new PropBuilder()
                        .setName("max_nodes")
                        .setKind("float")
                        .setWidget(new PropWidgetDefinitionBuilder()
                            .setKind("text")
                            .build())
                        .setValidationFormat(Joi.number().integer().min(0))
                        .setDocumentation("The maximum number of nodes that this node pool can be auto-scaled to. The value will be `0` if `auto_scale` is set to `false`.")
                        .build()
                )
                .build()
        )
        .build();

    // Tags property
    const tagsProp = new PropBuilder()
        .setName("tags")
        .setKind("array")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .build())
        .setEntry(
            new PropBuilder()
                .setName("tag")
                .setKind("string")
                .setWidget(new PropWidgetDefinitionBuilder()
                    .setKind("text")
                    .build())
                .build()
        )
        .setDocumentation("An array of tags to apply to the Kubernetes cluster. All clusters are automatically tagged `k8s` and `k8s:$K8S_CLUSTER_ID`.")
        .build();

    // VPC UUID property
    const vpcUuidProp = new PropBuilder()
        .setName("vpc_uuid")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().uuid())
        .setDocumentation("A string specifying the UUID of the VPC to which the Kubernetes cluster is assigned.")
        .build();

    // Cluster subnet property
    const clusterSubnetProp = new PropBuilder()
        .setName("cluster_subnet")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().pattern(/^(?:[0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$/))
        .setDocumentation("The range of IP addresses for the overlay network of the Kubernetes cluster in CIDR notation.")
        .build();

    // Service subnet property
    const serviceSubnetProp = new PropBuilder()
        .setName("service_subnet")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().pattern(/^(?:[0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$/))
        .setDocumentation("The range of assignable IP addresses for services running in the Kubernetes cluster in CIDR notation.")
        .build();

    // Auto upgrade property
    const autoUpgradeProp = new PropBuilder()
        .setName("auto_upgrade")
        .setKind("boolean")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("checkbox")
            .build())
        .setValidationFormat(Joi.boolean())
        .setDocumentation("A boolean value indicating whether the cluster will be automatically upgraded to new patch releases during its maintenance window.")
        .build();

    // Surge upgrade property
    const surgeUpgradeProp = new PropBuilder()
        .setName("surge_upgrade")
        .setKind("boolean")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("checkbox")
            .build())
        .setValidationFormat(Joi.boolean())
        .setDocumentation("A boolean value indicating whether surge upgrade is enabled/disabled for the cluster. Surge upgrade makes cluster upgrades fast and reliable by bringing up new nodes before destroying the outdated nodes.")
        .build();

    // High availability property
    const haProp = new PropBuilder()
        .setName("ha")
        .setKind("boolean")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("checkbox")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.boolean())
        .setDocumentation("A boolean value indicating whether the control plane is run in a highly available configuration in the cluster. Highly available control planes incur less downtime. The property cannot be disabled.")
        .build();

    // Maintenance policy property
    const maintenancePolicyProp = new PropBuilder()
        .setName("maintenance_policy")
        .setKind("object")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("header")
            .build())
        .setDocumentation("An object specifying the maintenance window policy for the Kubernetes cluster.")
        .addChild(
            new PropBuilder()
                .setName("start_time")
                .setKind("string")
                .setWidget(new PropWidgetDefinitionBuilder()
                    .setKind("text")
                    .build())
                .setValidationFormat(Joi.string().pattern(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/))
                .setDocumentation("The start time in UTC of the maintenance window policy in 24-hour clock format / HH:MM notation (e.g., `15:00`).")
                .build()
        )
        .addChild(
            new PropBuilder()
                .setName("day")
                .setKind("string")
                .setWidget(new PropWidgetDefinitionBuilder()
                    .setKind("comboBox")
                    .addOption("any", "Any day")
                    .addOption("monday", "Monday")
                    .addOption("tuesday", "Tuesday")
                    .addOption("wednesday", "Wednesday")
                    .addOption("thursday", "Thursday")
                    .addOption("friday", "Friday")
                    .addOption("saturday", "Saturday")
                    .addOption("sunday", "Sunday")
                    .build())
                .setDocumentation("The day of the maintenance window policy. May be one of `monday` through `sunday`, or `any` to indicate an arbitrary week day.")
                .build()
        )
        .build();

    // Create the asset
    const asset = new AssetBuilder()
        .addProp(nameProp)
        .addProp(regionProp)
        .addProp(versionProp)
        .addProp(nodePoolsProp)
        .addProp(tagsProp)
        .addProp(vpcUuidProp)
        .addProp(clusterSubnetProp)
        .addProp(serviceSubnetProp)
        .addProp(autoUpgradeProp)
        .addProp(surgeUpgradeProp)
        .addProp(haProp)
        .addProp(maintenancePolicyProp)
        .build();

    return asset;
}