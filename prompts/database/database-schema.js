function main() {
    // Name property
    const nameProp = new PropBuilder()
        .setName("name")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().required().max(255).pattern(/^[a-zA-Z0-9]?[a-z0-9A-Z.\-]*[a-z0-9A-Z]$/))
        .setDocumentation("A unique, human-readable name referring to a database cluster.")
        .build();

    // Engine property
    const engineProp = new PropBuilder()
        .setName("engine")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("comboBox")
            .addOption("pg", "PostgreSQL")
            .addOption("mysql", "MySQL")
            .addOption("redis", "Redis (Caching)")
            .addOption("valkey", "Valkey")
            .addOption("mongodb", "MongoDB")
            .addOption("kafka", "Apache Kafka")
            .addOption("opensearch", "OpenSearch")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().required().valid("pg", "mysql", "redis", "valkey", "mongodb", "kafka", "opensearch"))
        .setDocumentation("A slug representing the database engine used for the cluster. The possible values are: \"pg\" for PostgreSQL, \"mysql\" for MySQL, \"redis\" for Caching, \"mongodb\" for MongoDB, \"kafka\" for Kafka, \"opensearch\" for OpenSearch, and \"valkey\" for Valkey.")
        .build();

    // Version property
    const versionProp = new PropBuilder()
        .setName("version")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("comboBox")
            .addOption("11", "PostgreSQL 11")
            .addOption("12", "PostgreSQL 12")
            .addOption("13", "PostgreSQL 13")
            .addOption("14", "PostgreSQL 14")
            .addOption("15", "PostgreSQL 15")
            .addOption("16", "PostgreSQL 16")
            .addOption("5.7", "MySQL 5.7")
            .addOption("8", "MySQL 8.0")
            .addOption("6", "Redis 6")
            .addOption("7", "Redis 7")
            .addOption("7.0", "Valkey 7.0")
            .addOption("4.4", "MongoDB 4.4")
            .addOption("5.0", "MongoDB 5.0")
            .addOption("6.0", "MongoDB 6.0")
            .addOption("7.0", "MongoDB 7.0")
            .addOption("3.1", "Kafka 3.1")
            .addOption("3.2", "Kafka 3.2")
            .addOption("3.3", "Kafka 3.3")
            .addOption("3.4", "Kafka 3.4")
            .addOption("3.5", "Kafka 3.5")
            .addOption("1.3", "OpenSearch 1.3")
            .addOption("2.3", "OpenSearch 2.3")
            .addOption("2.5", "OpenSearch 2.5")
            .addOption("2.11", "OpenSearch 2.11")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().required())
        .setDocumentation("A string representing the version of the database engine in use for the cluster.")
        .build();

    // Region property
    const regionProp = new PropBuilder()
        .setName("region")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("comboBox")
            .addOption("nyc1", "New York 1")
            .addOption("nyc3", "New York 3")
            .addOption("ams3", "Amsterdam 3")
            .addOption("sfo3", "San Francisco 3")
            .addOption("sgp1", "Singapore 1")
            .addOption("lon1", "London 1")
            .addOption("fra1", "Frankfurt 1")
            .addOption("tor1", "Toronto 1")
            .addOption("blr1", "Bangalore 1")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().required())
        .setDocumentation("The slug identifier for the region where the database cluster is located.")
        .build();

    // Size property
    const sizeProp = new PropBuilder()
        .setName("size")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("comboBox")
            .addOption("db-s-1vcpu-1gb", "Basic (1 vCPU, 1GB RAM)")
            .addOption("db-s-1vcpu-2gb", "Basic (1 vCPU, 2GB RAM)")
            .addOption("db-s-2vcpu-2gb", "Basic (2 vCPU, 2GB RAM)")
            .addOption("db-s-2vcpu-4gb", "Basic (2 vCPU, 4GB RAM)")
            .addOption("db-s-4vcpu-8gb", "Basic (4 vCPU, 8GB RAM)")
            .addOption("db-s-6vcpu-16gb", "Basic (6 vCPU, 16GB RAM)")
            .addOption("db-s-8vcpu-32gb", "Basic (8 vCPU, 32GB RAM)")
            .addOption("db-s-16vcpu-64gb", "Basic (16 vCPU, 64GB RAM)")
            .build())
        .setValidationFormat(Joi.string().required())
        .setDocumentation("The slug identifier representing the size of the nodes in the database cluster.")
        .build();

    // Number of nodes property
    const numNodesProp = new PropBuilder()
        .setName("num_nodes")
        .setKind("float")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("comboBox")
            .addOption("1", "1 Node")
            .addOption("2", "2 Nodes")
            .addOption("3", "3 Nodes")
            .build())
        .setValidationFormat(Joi.number().integer().min(1).max(3).required())
        .setDocumentation("The number of nodes in the database cluster.")
        .build();

    // Storage size property
    const storageSizeMibProp = new PropBuilder()
        .setName("storage_size_mib")
        .setKind("float")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .build())
        .setValidationFormat(Joi.number().integer().min(1024).max(16777216))
        .setDocumentation("Additional storage added to the cluster, in MiB. If null, no additional storage is added to the cluster, beyond what is provided as a base amount from the 'size' and any previously added additional storage.")
        .build();

    // Private network UUID property
    const privateNetworkUuidProp = new PropBuilder()
        .setName("private_network_uuid")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().uuid())
        .setDocumentation("A string specifying the UUID of the VPC to which the database cluster will be assigned. If excluded, the cluster when creating a new database cluster, it will be assigned to your account's default VPC for the region.")
        .build();

    // Tags property
    const tagsProp = new PropBuilder()
        .setName("tags")
        .setKind("array")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .build())
        .setEntry(
            new PropBuilder()
                .setName("tags_item")
                .setKind("string")
                .setWidget(new PropWidgetDefinitionBuilder().setKind("text").build())
                .setValidationFormat(Joi.string())
                .build()
        )
        .setValidationFormat(Joi.array().items(Joi.string()).default([]))
        .setDocumentation("An array of tags (as strings) to apply to the database cluster.")
        .build();

    // Project ID property
    const projectIdProp = new PropBuilder()
        .setName("project_id")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .build())
        .setValidationFormat(Joi.string().uuid())
        .setDocumentation("The ID of the project that the database cluster is assigned to. If excluded when creating a new database cluster, it will be assigned to your default project.")
        .build();

    // Backup restore object (optional)
    const backupRestoreProp = new PropBuilder()
        .setName("backup_restore")
        .setKind("object")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("header")
            .build())
        .addChild(
            new PropBuilder()
                .setName("database_name")
                .setKind("string")
                .setWidget(new PropWidgetDefinitionBuilder().setKind("text").build())
                .setValidationFormat(Joi.string().required())
                .setDocumentation("The name of an existing database cluster from which the backup will be restored.")
                .build()
        )
        .addChild(
            new PropBuilder()
                .setName("backup_created_at")
                .setKind("string")
                .setWidget(new PropWidgetDefinitionBuilder().setKind("text").build())
                .setValidationFormat(Joi.string().isoDate())
                .setDocumentation("The timestamp of an existing database cluster backup in ISO8601 combined date and time format. The most recent backup will be used if excluded.")
                .build()
        )
        .setDocumentation("Object containing backup restore information for creating a database cluster from a backup.")
        .build();

    // Firewall rules property (array of rules)
    const rulesProp = new PropBuilder()
        .setName("rules")
        .setKind("array")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .build())
        .setEntry(
            new PropBuilder()
                .setName("rules_item")
                .setKind("object")
                .setWidget(new PropWidgetDefinitionBuilder().setKind("header").build())
                .addChild(
                    new PropBuilder()
                        .setName("type")
                        .setKind("string")
                        .setWidget(new PropWidgetDefinitionBuilder()
                            .setKind("comboBox")
                            .addOption("ip_addr", "IP Address")
                            .addOption("tag", "Tag")
                            .addOption("droplet", "Droplet")
                            .addOption("k8s", "Kubernetes Cluster")
                            .build())
                        .setValidationFormat(Joi.string().valid("ip_addr", "tag", "droplet", "k8s"))
                        .setDocumentation("The type of resource that the firewall rule allows to access the database cluster.")
                        .build()
                )
                .addChild(
                    new PropBuilder()
                        .setName("value")
                        .setKind("string")
                        .setWidget(new PropWidgetDefinitionBuilder().setKind("text").build())
                        .setValidationFormat(Joi.string().required())
                        .setDocumentation("The ID of the specific resource, the name of a tag applied to a group of resources, or the IP address that the firewall rule allows to access the database cluster.")
                        .build()
                )
                .build()
        )
        .setValidationFormat(Joi.array().items(Joi.object()).default([]))
        .setDocumentation("An array of firewall rules that specify which traffic is allowed to access the database cluster.")
        .build();

    // Create the asset
    const asset = new AssetBuilder()
        .addProp(nameProp)
        .addProp(engineProp)
        .addProp(versionProp)
        .addProp(regionProp)
        .addProp(sizeProp)
        .addProp(numNodesProp)
        .addProp(storageSizeMibProp)
        .addProp(privateNetworkUuidProp)
        .addProp(tagsProp)
        .addProp(projectIdProp)
        .addProp(backupRestoreProp)
        .addProp(rulesProp)
        .build();

    return asset;
}