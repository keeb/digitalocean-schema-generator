function main() {
    // Name property (required)
    const nameProp = new PropBuilder()
        .setName("name")
        .setKind("string")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("text")
            .setCreateOnly()
            .build())
        .setValidationFormat(Joi.string().required().pattern(/^[a-zA-Z0-9][a-zA-Z0-9\.-]+$/))
        .setDocumentation("A human-readable name for a firewall. The name must begin with an alphanumeric character. Subsequent characters must either be alphanumeric characters, a period (.), or a dash (-).")
        .build();

    // Droplet IDs property
    const dropletIdsProp = new PropBuilder()
        .setName("droplet_ids")
        .setKind("array")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .build())
        .setEntry(
            new PropBuilder()
                .setName("droplet_ids_item")
                .setKind("float")
                .setWidget(new PropWidgetDefinitionBuilder()
                    .setKind("text")
                    .build())
                .setValidationFormat(Joi.number().integer().min(0))
                .setDocumentation("Droplet ID")
                .build()
        )
        .setDocumentation("An array containing the IDs of the Droplets assigned to the firewall.")
        .build();

    // Tags property
    const tagsProp = new PropBuilder()
        .setName("tags")
        .setKind("array")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .build())
        .setEntry(
            new PropBuilder()
                .setName("tags_item")
                .setKind("string")
                .setWidget(new PropWidgetDefinitionBuilder()
                    .setKind("text")
                    .build())
                .setDocumentation("Tag name")
                .build()
        )
        .setDocumentation("An array containing the names of the Tags assigned to the firewall.")
        .build();

    // Firewall rule source/destination addresses
    const addressesProp = new PropBuilder()
        .setName("addresses")
        .setKind("array")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .build())
        .setEntry(
            new PropBuilder()
                .setName("addresses_item")
                .setKind("string")
                .setWidget(new PropWidgetDefinitionBuilder()
                    .setKind("text")
                    .build())
                .setDocumentation("IPv4 address, IPv6 address, IPv4 CIDR, or IPv6 CIDR")
                .build()
        )
        .setDocumentation("An array of strings containing the IPv4 addresses, IPv6 addresses, IPv4 CIDRs, and/or IPv6 CIDRs to which the firewall will allow traffic.")
        .build();

    // Firewall rule droplet IDs
    const ruleDropletIdsProp = new PropBuilder()
        .setName("droplet_ids")
        .setKind("array")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .build())
        .setEntry(
            new PropBuilder()
                .setName("droplet_ids_item")
                .setKind("float")
                .setWidget(new PropWidgetDefinitionBuilder()
                    .setKind("text")
                    .build())
                .setValidationFormat(Joi.number().integer().min(0))
                .setDocumentation("Droplet ID")
                .build()
        )
        .setDocumentation("An array containing the IDs of the Droplets to which the firewall will allow traffic.")
        .build();

    // Load balancer UIDs
    const loadBalancerUidsProp = new PropBuilder()
        .setName("load_balancer_uids")
        .setKind("array")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .build())
        .setEntry(
            new PropBuilder()
                .setName("load_balancer_uids_item")
                .setKind("string")
                .setWidget(new PropWidgetDefinitionBuilder()
                    .setKind("text")
                    .build())
                .setValidationFormat(Joi.string().uuid())
                .setDocumentation("Load balancer UID")
                .build()
        )
        .setDocumentation("An array containing the IDs of the load balancers to which the firewall will allow traffic.")
        .build();

    // Kubernetes IDs
    const kubernetesIdsProp = new PropBuilder()
        .setName("kubernetes_ids")
        .setKind("array")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .build())
        .setEntry(
            new PropBuilder()
                .setName("kubernetes_ids_item")
                .setKind("string")
                .setWidget(new PropWidgetDefinitionBuilder()
                    .setKind("text")
                    .build())
                .setValidationFormat(Joi.string().uuid())
                .setDocumentation("Kubernetes cluster ID")
                .build()
        )
        .setDocumentation("An array containing the IDs of the Kubernetes clusters to which the firewall will allow traffic.")
        .build();

    // Firewall rule tags
    const ruleTagsProp = new PropBuilder()
        .setName("tags")
        .setKind("array")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .build())
        .setEntry(
            new PropBuilder()
                .setName("tags_item")
                .setKind("string")
                .setWidget(new PropWidgetDefinitionBuilder()
                    .setKind("text")
                    .build())
                .setDocumentation("Tag name")
                .build()
        )
        .setDocumentation("An array containing the names of Tags corresponding to groups of Droplets to which the firewall will allow traffic.")
        .build();

    // Sources object for inbound rules
    const sourcesProp = new PropBuilder()
        .setName("sources")
        .setKind("object")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("header")
            .build())
        .addChild(addressesProp)
        .addChild(ruleDropletIdsProp)
        .addChild(loadBalancerUidsProp)
        .addChild(kubernetesIdsProp)
        .addChild(ruleTagsProp)
        .setDocumentation("An object specifying locations from which inbound traffic will be accepted.")
        .build();

    // Destinations object for outbound rules
    const destinationsProp = new PropBuilder()
        .setName("destinations")
        .setKind("object")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("header")
            .build())
        .addChild(addressesProp)
        .addChild(ruleDropletIdsProp)
        .addChild(loadBalancerUidsProp)
        .addChild(kubernetesIdsProp)
        .addChild(ruleTagsProp)
        .setDocumentation("An object specifying locations to which outbound traffic will be allowed.")
        .build();

    // Inbound rule item
    const inboundRuleItemProp = new PropBuilder()
        .setName("inbound_rules_item")
        .setKind("object")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("header")
            .build())
        .addChild(
            new PropBuilder()
                .setName("protocol")
                .setKind("string")
                .setHidden(false)
                .setWidget(new PropWidgetDefinitionBuilder()
                    .setKind("comboBox")
                    .addOption("tcp", "TCP")
                    .addOption("udp", "UDP")
                    .addOption("icmp", "ICMP")
                    .build())
                .setValidationFormat(Joi.string().required().valid("tcp", "udp", "icmp"))
                .setDocumentation("The type of traffic to be allowed. This may be one of tcp, udp, or icmp.")
                .build()
        )
        .addChild(
            new PropBuilder()
                .setName("ports")
                .setKind("string")
                .setHidden(false)
                .setWidget(new PropWidgetDefinitionBuilder()
                    .setKind("text")
                    .build())
                .setValidationFormat(Joi.string().required())
                .setDocumentation("The ports on which traffic will be allowed specified as a string containing a single port, a range (e.g. '8000-9000'), or '0' when all ports are open for a protocol. For ICMP rules this parameter will always return '0'.")
                .build()
        )
        .addChild(sourcesProp)
        .setDocumentation("An inbound firewall rule")
        .build();

    // Outbound rule item
    const outboundRuleItemProp = new PropBuilder()
        .setName("outbound_rules_item")
        .setKind("object")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("header")
            .build())
        .addChild(
            new PropBuilder()
                .setName("protocol")
                .setKind("string")
                .setHidden(false)
                .setWidget(new PropWidgetDefinitionBuilder()
                    .setKind("comboBox")
                    .addOption("tcp", "TCP")
                    .addOption("udp", "UDP")
                    .addOption("icmp", "ICMP")
                    .build())
                .setValidationFormat(Joi.string().required().valid("tcp", "udp", "icmp"))
                .setDocumentation("The type of traffic to be allowed. This may be one of tcp, udp, or icmp.")
                .build()
        )
        .addChild(
            new PropBuilder()
                .setName("ports")
                .setKind("string")
                .setHidden(false)
                .setWidget(new PropWidgetDefinitionBuilder()
                    .setKind("text")
                    .build())
                .setValidationFormat(Joi.string().required())
                .setDocumentation("The ports on which traffic will be allowed specified as a string containing a single port, a range (e.g. '8000-9000'), or '0' when all ports are open for a protocol. For ICMP rules this parameter will always return '0'.")
                .build()
        )
        .addChild(destinationsProp)
        .setDocumentation("An outbound firewall rule")
        .build();

    // Inbound rules property
    const inboundRulesProp = new PropBuilder()
        .setName("inbound_rules")
        .setKind("array")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .build())
        .setEntry(inboundRuleItemProp)
        .setDocumentation("An array of objects specifying the inbound firewall rules to be added to the Firewall.")
        .build();

    // Outbound rules property
    const outboundRulesProp = new PropBuilder()
        .setName("outbound_rules")
        .setKind("array")
        .setHidden(false)
        .setWidget(new PropWidgetDefinitionBuilder()
            .setKind("array")
            .build())
        .setEntry(outboundRuleItemProp)
        .setDocumentation("An array of objects specifying the outbound firewall rules to be added to the Firewall.")
        .build();

    // Create the asset
    const asset = new AssetBuilder()
        .addProp(nameProp)
        .addProp(inboundRulesProp)
        .addProp(outboundRulesProp)
        .addProp(dropletIdsProp)
        .addProp(tagsProp)
        .build();

    return asset;
}